"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '@/hooks/useAuth'; // Import useAuth to get user ID
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Label } from '@/components/ui/Label';
import { Textarea } from '@/components/ui/Textarea';
import { Spinner } from '@/components/ui/Spinner';
import { Icons } from '@/components/ui/Icons';
import { supabase } from '@/lib/supabaseClient'; // Import supabase for invoke
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogDescription, 
  DialogFooter, 
  DialogClose 
} from '@/components/ui/dialog';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'; // Import Select
import { toast } from 'react-hot-toast';
import { Alert, AlertDescription } from '@/components/ui/alert'; // Import Alert

// Define common legal template types/categories
const TEMPLATE_CATEGORIES = [
  'Contract', 'Motion', 'Pleading', 'Letter', 'Memorandum', 
  'Agreement', 'Affidavit', 'Discovery Request', 'Order', 'Other'
];

interface NewAITemplateDraftModalProps {
  isOpen: boolean;
  onClose: (refreshNeeded?: boolean) => void; 
  onSuccess?: (newTemplateDraftId: string) => void; 
}

const NewAITemplateDraftModal: React.FC<NewAITemplateDraftModalProps> = ({ isOpen, onClose, onSuccess }) => {
  // Removed templateName state, will be generated by AI
  const [category, setCategory] = useState<string>(TEMPLATE_CATEGORIES[0]);
  const [instructions, setInstructions] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { user } = useAuth(); // Get user for function call

  // Reset state when modal opens
  useEffect(() => {
    if (isOpen) {
      setCategory(TEMPLATE_CATEGORIES[0]);
      setInstructions('');
      setIsLoading(false);
      setError(null);
    } else {
        // Clear potentially sensitive data when closing
        setInstructions(''); 
    }
  }, [isOpen]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!instructions.trim()) {
      setError('Template drafting instructions are required.');
      return;
    }
    if (!category) {
        setError('Please select a template category.');
        return;
    }
     if (!user) {
        setError('User not authenticated. Please log in.');
        return;
    }

    setIsLoading(true);
    setError(null);
    const toastId = toast.loading('Generating AI template...');

    try {
      console.log("Invoking create-template-from-ai function...");
      
      const { data, error: invokeError } = await supabase.functions.invoke(
          'create-template-from-ai',
          {
              body: { instructions: instructions.trim(), category, userId: user.id },
          }
      );

      if (invokeError) throw invokeError;
      
      const result = data as { success: boolean, templateId?: string, error?: string };

      if (!result || !result.success) {
          throw new Error(result?.error || 'AI template creation failed.');
      }
      
      if (!result.templateId) {
          throw new Error('Template created, but ID was not returned.');
      }

      console.log("AI template created successfully:", result.templateId);
      toast.success('AI template created!', { id: toastId });

      if (onSuccess) {
        onSuccess(result.templateId);
      }
      handleClose(true); // Close and indicate refresh needed

    } catch (err) {
      console.error('Error during AI template creation:', err);
      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';
      setError(errorMessage);
      toast.error(`Error: ${errorMessage}`, { id: toastId });
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleClose = useCallback((refreshNeeded = false) => {
      if (isLoading) return; 
      onClose(refreshNeeded);
  }, [isLoading, onClose]);

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && handleClose()}> 
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Create New AI Template</DialogTitle>
          <DialogDescription>
            Describe the template you need, and the AI will generate a starting point including common placeholders.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="category" className="text-right">
                Category
              </Label>
              {/* Shadcn Select Component */}
              <Select 
                value={category}
                onValueChange={setCategory} 
                disabled={isLoading}
              >
                <SelectTrigger id="category" className="col-span-3">
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {TEMPLATE_CATEGORIES.map((cat) => (
                    <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="grid grid-cols-4 items-start gap-4">
              <Label htmlFor="instructions" className="text-right pt-2">
                Instructions
              </Label>
              <Textarea
                id="instructions"
                value={instructions}
                onChange={(e) => setInstructions(e.target.value)}
                placeholder="e.g., Draft a simple Non-Disclosure Agreement (NDA) between two parties..."
                required
                rows={6} // Increased rows
                className="col-span-3"
                disabled={isLoading}
              />
            </div>

            {error && (
                <Alert variant="destructive">
                    <Icons.Alert className="h-4 w-4" /> 
                    <AlertDescription>{error}</AlertDescription>
                </Alert>
            )}
          </div>
          <DialogFooter>
            <DialogClose asChild>
                 <Button type="button" variant="outline" disabled={isLoading}>
                     Cancel
                 </Button>
            </DialogClose>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? <Spinner size="sm" className="mr-2" /> : <Icons.Sparkles className="mr-2 h-4 w-4" />}
              Generate Template
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default NewAITemplateDraftModal; 